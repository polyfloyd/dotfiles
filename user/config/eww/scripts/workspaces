#!/usr/bin/env python3


from pathlib import Path
import json
import subprocess


listen_cmd = ['swaymsg', '-m', '-t', 'subscribe', '["workspace", "window"]']
dump_cmd = ['swaymsg', '-t', 'get_tree']


def walk_tree(node, in_workspace=False):
    is_workspace = node['type'] == 'workspace'

    # A workspace can not be in another workspace.
    if in_workspace:
        assert not is_workspace

    # Ignore the hidden scratch workspace.
    if is_workspace and node['name'] == '__i3_scratch':
        return []

    if is_workspace:
        windows = []
        for n in node['nodes'] + node['floating_nodes']:
            windows += walk_tree(n, True)
        return [{
            'type': 'workspace',
            'num': node['num'],
            'name': node['name'],
            'focused': any(w['focused'] for w in windows),
            'windows': windows,
        }]

    if in_workspace and node['name'] is not None:
        if node.get('window_type') == 'notification':
            return []

        if node['app_id'] == '' and 'spotify' in Path(f'/proc/{node["pid"]}/cmdline').read_text():
            icon_app = 'spotify'
        elif node['name'] == 'neovim':
            icon_app = 'nvim'
        elif (class_ := node.get('window_properties', {}).get('class', '').lower()):
            icon_app = class_
        else:
            icon_app = node['app_id']
        return [{
            'type': 'window',
            'name': node['name'],
            'pid': node['pid'],
            'app_id': icon_app,
            'icon': icon_app,
            'focused': node['focused'],
            'urgent': node['urgent'],
        }]

    workspaces = []
    for n in node['nodes']:
        workspaces += walk_tree(n, in_workspace)
    return workspaces


def dump():
    k = subprocess.run(dump_cmd, capture_output=True)
    event = json.loads(k.stdout)
    workspaces = walk_tree(event)
    print(json.dumps(workspaces), flush=True)


dump()
with subprocess.Popen(listen_cmd, stdout=subprocess.PIPE) as proc:
    while True:
        proc.stdout.readline()
        dump()
