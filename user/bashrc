source $HOME/.profile
[ -r $HOME/.bashrc.local ] && source $HOME/.bashrc.local

# If not running interactively, don't do anything!
[[ $- != *i* ]] && return

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

# Enable history appending instead of overwriting.
shopt -s histappend

export HISTSIZE=5000

case ${TERM} in
	xterm*|rxvt*|Eterm|aterm|kterm|gnome*)
		PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
		;;
	screen)
		PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033_%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
		;;
esac

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS. Try to use the external file
# first to take advantage of user additions. Use internal bash
# globbing instead of external grep binary.

# sanitize TERM:
safe_term=${TERM//[^[:alnum:]]/?}
match_lhs=""

[[ -f ~/.config/dircolors ]] && match_lhs="${match_lhs}$(<~/.config/dircolors)"
[[ -z ${match_lhs} ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)

if [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]]; then
	# we have colors :-)
	eval $(dircolors ~/.config/dircolors)


	PS1="$(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi) \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]x \")\[\033[01;34m\]\w\[\033[01;33m\]\$(git branch 2>/dev/null | sed -n 's/* \(.\+\)/:\1/p')\[\033[01;31m\]\$(git diff --name-only 2>/dev/null | sed -z 's/\(.\+\)/+/g')\[\033[01;34m\] \\$\[\033[00m\] "

	alias ls="ls -h --color=auto"
	alias dir="dir --color=auto"
	alias grep="grep --color=auto"
	alias dmesg='dmesg --color'
else
	PS1="\u@\h \w \$([[ \$? != 0 ]] && echo \"x \")\$ "

	alias ls="ls -h"
fi

PS2="> "
PS3="> "
PS4="+ "

unset safe_term match_lhs

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion


# FZF
export FZF_DEFAULT_COMMAND='git ls-files --exclude-standard --others --cached || find * -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null'
source /usr/share/doc/fzf/examples/key-bindings.bash


# Aliases and macros
alias cd="pushd > /dev/null"
alias b="popd > /dev/null"
alias ..="cd .."
alias l="ls -lF"
alias la="ls -lFA"
alias grepr="grep -rIn"
alias certinfo="openssl x509 -noout -text -in"
alias mkpasswd="dd if=/dev/urandom count=1 bs=42 status=none | base64"
alias youtube-dl="yt-dlp"
alias youtube-mp3="youtube-dl -o '%(title)s.%(ext)s' -x --audio-format mp3"
alias ffmpeg="ffmpeg -hide_banner"
alias ffprobe="ffprobe -hide_banner"

if [[ $DISPLAY && `command -v nvim` ]]; then
	gvim() {
		alacritty --working-directory="$PWD" --title="neovim" -e nvim $@ &
		disown
	}
fi

markdown2pdf() {
	if [ ! $1 ]; then
		echo "Usage: $0 <file>"
		return
	fi
	base=`echo $1 | sed 's/\.\w\+$//'`
	pandoc -s -f markdown_github -o $base.pdf $1
}

gif2webm() {
	if [ ! $1 ]; then
		echo "Usage: $0 <file>"
		return
	fi
	base=`echo $1 | sed 's/\.\w\+$//'`
	ffmpeg -i "$0" -c:v libvpx -crf 12 -b:v 500K "$base.webm"
}

video2webm() {
	if [ ! $1 ]; then
		echo "Usage: $0 <file>"
		return
	fi
	base=`echo $1 | sed 's/\.\w\+$//'`
	ffmpeg -i "$1" -codec:v libvpx -quality good -cpu-used 0 -qmin 10 -qmax 42 -threads 8 -codec:a vorbis -ac 2 -strict -2 -b:a 128k "$base.webm"
}

video2x265() {
	base=`echo "$1" | sed 's/\.\w\+$//'`
	ffmpeg -i "$1" -c:v libx265 -pix_fmt yuv420p -x265-params crf=28:keyint=240:min-keyint=20 -preset slow "$1.recode.mkv" || return
	mv "$1" "$1.bak.mp4"
	mv "$1.recode.mkv" "$base.mkv"
}

image_optimize_jpg() {
	base=`echo "$1" | sed 's/\.\w\+$//'`
	convert -strip -interlace Plane -sampling-factor 4:2:0 -define jpeg:dct-method=float -quality 85% "$1" "$1.recode.jpg" || return
	mv "$1" "$1.bak.jpg"
	mv "$1.recode.jpg" "$base.jpg"
}

video_reencode() {
	base=`echo "$1" | sed 's/\.\w\+$//'`
#	ffmpeg -i "$1" -c:v libx264 -preset slow -crf 28 "$1.recode.mp4" || return
	ffmpeg -i "$1" -c:v libx265 -pix_fmt yuv420p -x265-params crf=28:keyint=240:min-keyint=20 -preset slow "$1.recode.mp4" || return
	mv "$1" "$1.bak.mp4"
	mv "$1.recode.mp4" "$base.mp4"
}
